
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."attachments" (
    "created_at" timestamp with time zone DEFAULT "now"(),
    "upload_url" "text",
    "last_modified" timestamp with time zone NOT NULL,
    "mime_type" "text" NOT NULL,
    "name" "text" NOT NULL,
    "as_image" boolean DEFAULT false NOT NULL,
    "message_id" bigint NOT NULL,
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "has_error" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."attachments" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."channels" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "name" "text",
    "description" "text",
    "privacy_level" smallint NOT NULL,
    "is_dm" boolean NOT NULL,
    "password" "text",
    "owner" "uuid" NOT NULL,
    "auto_join" boolean DEFAULT false NOT NULL,
    "members_can_edit" boolean DEFAULT true NOT NULL
);

ALTER TABLE "public"."channels" OWNER TO "postgres";

ALTER TABLE "public"."channels" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."channel_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."members" (
    "channel_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL,
    "last_view" timestamp with time zone DEFAULT "now"() NOT NULL,
    "invite_message" character varying(512),
    "accepted" boolean NOT NULL,
    "actor" "uuid" DEFAULT "auth"."uid"()
);

ALTER TABLE "public"."members" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."joined_channels" AS
 SELECT "members"."channel_id"
   FROM "public"."members"
  WHERE (("members"."user_id" = "auth"."uid"()) AND ("members"."accepted" = true));

ALTER TABLE "public"."joined_channels" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."messages" (
    "id" bigint NOT NULL,
    "channel_id" bigint NOT NULL,
    "user_id" "uuid",
    "sent_at" timestamp with time zone DEFAULT "timezone"('utc'::"text", "now"()) NOT NULL,
    "replying_to" bigint,
    "markdown" character varying(4096) NOT NULL,
    "rich" "jsonb"
);

ALTER TABLE "public"."messages" OWNER TO "postgres";

ALTER TABLE "public"."messages" ALTER COLUMN "id" ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME "public"."message_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "banner_url" "text",
    "name" "text" NOT NULL,
    "verified" boolean NOT NULL,
    "profile_picture_url" "text",
    "is_bot" boolean NOT NULL,
    "nickname" "text" NOT NULL,
    "admin" boolean DEFAULT false NOT NULL,
    "email" "text",
    "disabled" boolean DEFAULT false NOT NULL,
    "bot_webhook" "text"
);

ALTER TABLE "public"."users" OWNER TO "postgres";

CREATE OR REPLACE VIEW "public"."visible_channels" AS
 SELECT "members"."channel_id"
   FROM "public"."members"
  WHERE ("members"."user_id" = "auth"."uid"());

ALTER TABLE "public"."visible_channels" OWNER TO "postgres";

ALTER TABLE ONLY "public"."attachments"
    ADD CONSTRAINT "attachments_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."attachments"
    ADD CONSTRAINT "attachments_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."channels"
    ADD CONSTRAINT "channel_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "member_pkey" PRIMARY KEY ("user_id", "channel_id");

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "message_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_email_key" UNIQUE ("email");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."attachments"
    ADD CONSTRAINT "attachments_message_id_fkey" FOREIGN KEY ("message_id") REFERENCES "public"."messages"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."channels"
    ADD CONSTRAINT "channels_owner_fkey" FOREIGN KEY ("owner") REFERENCES "public"."users"("id");

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_actor_fkey" FOREIGN KEY ("actor") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_channel_id_fkey" FOREIGN KEY ("channel_id") REFERENCES "public"."channels"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."members"
    ADD CONSTRAINT "members_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_channel_id_fkey" FOREIGN KEY ("channel_id") REFERENCES "public"."channels"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_replying_to_fkey" FOREIGN KEY ("replying_to") REFERENCES "public"."messages"("id");

ALTER TABLE ONLY "public"."messages"
    ADD CONSTRAINT "messages_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON DELETE SET NULL;

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

CREATE POLICY "Admin access" ON "public"."channels" USING ((( SELECT "users"."admin"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = true));

CREATE POLICY "Admin access" ON "public"."members" USING ((( SELECT "users"."admin"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = true));

CREATE POLICY "Admin access" ON "public"."messages" USING ((( SELECT "users"."admin"
   FROM "public"."users"
  WHERE ("users"."id" = "auth"."uid"())) = true));

CREATE POLICY "Allow access if the user is the owner of the related message" ON "public"."attachments" USING (("auth"."uid"() = ( SELECT "messages"."user_id"
   FROM "public"."messages"
  WHERE ("messages"."id" = "attachments"."message_id"))));

CREATE POLICY "Allow channel owners to edit and delete their channels." ON "public"."channels" USING (("auth"."uid"() = "owner")) WITH CHECK ((("auto_join" = false) AND ("is_dm" = false)));

CREATE POLICY "Allow users to add themselves to channels they own" ON "public"."members" FOR INSERT WITH CHECK ((("auth"."uid"() IN ( SELECT "channels"."owner"
   FROM "public"."channels"
  WHERE ("channels"."id" = "members"."channel_id"))) AND ("auth"."uid"() = "user_id")));

CREATE POLICY "Allow users to delete invitations" ON "public"."members" FOR DELETE USING (("auth"."uid"() = "user_id"));

CREATE POLICY "Allow users to update channels they're in" ON "public"."channels" FOR UPDATE USING (("auth"."uid"() IN ( SELECT "members"."user_id"
   FROM "public"."members"
  WHERE ("members"."channel_id" = "channels"."id")))) WITH CHECK ((("members_can_edit" = true) OR ("owner" = "auth"."uid"())));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."channels" FOR INSERT TO "authenticated" WITH CHECK (("auto_join" = false));

CREATE POLICY "Enable read access for everyone" ON "public"."users" FOR SELECT USING (true);

CREATE POLICY "Enable read access for users in the channel" ON "public"."messages" FOR SELECT USING (("channel_id" IN ( SELECT "members"."channel_id"
   FROM "public"."members"
  WHERE ("members"."user_id" = "auth"."uid"()))));

CREATE POLICY "Enable read access to private channels if user is member" ON "public"."channels" FOR SELECT USING (("id" IN ( SELECT "visible_channels"."channel_id"
   FROM "public"."visible_channels")));

CREATE POLICY "Enable read access to public channels" ON "public"."channels" FOR SELECT USING (("privacy_level" = 0));

CREATE POLICY "Let members of channels revoke invites" ON "public"."members" FOR DELETE USING (("channel_id" IN ( SELECT "joined_channels"."channel_id"
   FROM "public"."joined_channels")));

CREATE POLICY "Let members of channels to invite users to channels they're in" ON "public"."members" FOR INSERT WITH CHECK (((("channel_id" IN ( SELECT "joined_channels"."channel_id"
   FROM "public"."joined_channels")) OR ("auth"."uid"() = ( SELECT "channels"."owner"
   FROM "public"."channels"
  WHERE ("channels"."id" = "members"."channel_id")))) AND ("accepted" = false)));

CREATE POLICY "Let users accept invitations" ON "public"."members" FOR UPDATE USING (("user_id" = "auth"."uid"()));

CREATE POLICY "Let users add, delete, and edit their own messages" ON "public"."messages" USING (("channel_id" IN ( SELECT "joined_channels"."channel_id"
   FROM "public"."joined_channels"))) WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Let users delete DMs they're a part of" ON "public"."channels" FOR DELETE USING ((("is_dm" = true) AND ("id" IN ( SELECT "joined_channels"."channel_id"
   FROM "public"."joined_channels"))));

CREATE POLICY "Let users join public channels" ON "public"."members" FOR INSERT WITH CHECK ((("user_id" = "auth"."uid"()) AND (( SELECT "channels"."privacy_level"
   FROM "public"."channels"
  WHERE ("channels"."id" = "members"."channel_id")) = 0) AND ("accepted" = true)));

CREATE POLICY "Let users see all members" ON "public"."members" FOR SELECT TO "authenticated" USING (true);

CREATE POLICY "Prevent access if user is disabled" ON "public"."channels" AS RESTRICTIVE TO "authenticated" USING ((( SELECT "users"."disabled"
   FROM "public"."users"
  WHERE ("auth"."uid"() = "users"."id")) = false));

CREATE POLICY "Prevent access if user is disabled" ON "public"."members" AS RESTRICTIVE TO "authenticated" USING ((( SELECT "users"."disabled"
   FROM "public"."users"
  WHERE ("auth"."uid"() = "users"."id")) = false));

CREATE POLICY "Prevent access if user is disabled" ON "public"."messages" AS RESTRICTIVE TO "authenticated" USING ((( SELECT "users"."disabled"
   FROM "public"."users"
  WHERE ("auth"."uid"() = "users"."id")) = false));

CREATE POLICY "Users can create their profile." ON "public"."users" FOR INSERT WITH CHECK ((("auth"."uid"() = "id") AND ("verified" = false) AND ("admin" = false)));

CREATE POLICY "Users can update their profiles." ON "public"."users" FOR UPDATE WITH CHECK ((("id" = "auth"."uid"()) AND ("admin" = false) AND ("verified" = false)));

ALTER TABLE "public"."attachments" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."channels" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."members" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."messages" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."users" ENABLE ROW LEVEL SECURITY;

REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;
GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON TABLE "public"."attachments" TO "anon";
GRANT ALL ON TABLE "public"."attachments" TO "authenticated";
GRANT ALL ON TABLE "public"."attachments" TO "service_role";

GRANT ALL ON TABLE "public"."channels" TO "anon";
GRANT ALL ON TABLE "public"."channels" TO "authenticated";
GRANT ALL ON TABLE "public"."channels" TO "service_role";

GRANT ALL ON SEQUENCE "public"."channel_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."channel_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."channel_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."members" TO "anon";
GRANT ALL ON TABLE "public"."members" TO "authenticated";
GRANT ALL ON TABLE "public"."members" TO "service_role";

GRANT ALL ON TABLE "public"."joined_channels" TO "anon";
GRANT ALL ON TABLE "public"."joined_channels" TO "authenticated";
GRANT ALL ON TABLE "public"."joined_channels" TO "service_role";

GRANT ALL ON TABLE "public"."messages" TO "anon";
GRANT ALL ON TABLE "public"."messages" TO "authenticated";
GRANT ALL ON TABLE "public"."messages" TO "service_role";

GRANT ALL ON SEQUENCE "public"."message_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."message_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."message_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

GRANT ALL ON TABLE "public"."visible_channels" TO "anon";
GRANT ALL ON TABLE "public"."visible_channels" TO "authenticated";
GRANT ALL ON TABLE "public"."visible_channels" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
